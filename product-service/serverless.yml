# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

custom:
  tableNames:
    products: ${self:service}-${sls:stage}-productsTable
    stocks: ${self:service}-${sls:stage}-stocksTable

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-central-1
  httpApi:
    cors:
      allowedOrigins:
        - http://localhost:4200
        - https://d2vtpotpr14qt7.cloudfront.net
        - https://inspector.swagger.io
  environment:
    PRODUCTS_TABLE: ${self:custom.tableNames.products}
    STOCKS_TABLE: ${self:custom.tableNames.stocks}
    CREATE_PRODUCT_TOPIC_ARN: !Ref CreateProductTopic
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: 
            - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableNames.products}'
            - 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableNames.stocks}'
        - Effect: 'Allow'
          Action:
            - 'sqs:*'
          Resource:
            - Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
        - Effect: 'Allow'
          Action:
            - 'sns:*'
          Resource: !Ref CreateProductTopic

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  patterns:
    - '!data/**'
    - '!events/**'
    - '!swagger.yaml'

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - httpApi: 'GET /products'
  getProductById:
    handler: handler.getProductById
    events:
      - httpApi: 'GET /products/{productId}'
  addProduct:
    handler: handler.addProduct
    events:
      - httpApi: 'POST /products'
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
          batchSize: 5

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table  
      Properties:
        TableName: ${self:service}-${sls:stage}-productsTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
    StocksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-stocksTable
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput: 
          ReadCapacityUnits: "5"
          WriteCapacityUnits: "5"
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-catalogItemsQueue
    CreateProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    CreateProductTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn:
          Ref: CreateProductTopic
        Endpoint: elena.kim3011@gmail.com
